#!/bin/sh
## posixsdm - TTY-based display manager

ttyexit() {
# Return to TTY or the start of the script
printf "\nEntered exit prompt\n"
while read -rp "Do you want to return to the TTY, exit or go to the login menu? ([T]TY/E[x]it/[L]ogin) " txl; do
	case "$txl" in
		[Tt]) printf "\nExiting to TTY shell...\n"
		exec "$SHELL";;
		[Xx]) printf "\nExiting to TTY login...\n"
		exit 0;;
		[Ll]) printf "\nReturning to posixsdm login...\n"
		case "$tty_warn" in
			1) run_once=1
			warn_user;;
			"") concheck
		esac;;
		*) printf "\nError: invalid input\n\n"
	esac
done
}

wrun() {
# xrun() equivalent for Wayland
if [ -f "$wses"/$wm.desktop ]; then
	export XDG_SESSION_TYPE="wayland"
	printf "\nRunning %s\n" "$runwm"
	$dexec "$runwm" $param
else
	export XDG_SESSION_TYPE="tty"
	printf "\nError: invalid input or .desktop file not found\n"
fi
}

xrun() {
# Run Xorg-based desktops; If more than one .desktop file is found, continue
# If sx is found, execute Xorg via sx. Otherwise, use startx
# Read input to search for xsessions .desktop files
# Finally: if nothing is found, warn user
if [ -f "$xses"/$wm.desktop ]; then
	export XDG_SESSION_TYPE="x11"
	[ -f /usr/bin/startx ] && xstart="startx" || [ -f /usr/bin/sx ] && xstart="sx"
	printf "\nRunning %s\n" "$runwm"
	$dexec $xstart "$runwm" $param
elif [ ! -f /usr/bin/sx ] && [ ! -f /usr/bin/startx ]; then
	printf "\n\n%sCRITICAL ERROR%s\nXorg cannot be run:
startx and sx cannot be found
Please install startx or sx to fix this issue.\n" "$RED" "$NORMAL"
else
	export XDG_SESSION_TYPE="tty"
	printf "\nError: invalid input or .desktop file not found\n"
fi
}

wsetup() {
printf "\nEntered Wayland prompt\n"
wcheck=$(find "$wses" -type f | wc -l)
case "$wcheck" in
	1) printf "\nOnly one environment found"
	runwm=$(grep -oP '(?<=Exec= ).*' "$wses"/*.desktop)
	wrun;;
	0) printf "\n%sCRITICAL ERROR%s\nNo Wayland-based environment has been found." "$RED" "$NORMAL"
	read -rp "Press return to go back to the start menu " az
	sdmlogin
esac

while read -rp "What Wayland desktop do you want to run? ([V]iew/E[x]it/[INPUT]) " wm; do
	case "$wm" in
		[Vv]) find "$wses" -type f -printf "%f\n";;
		[Xx]) ttyexit;;
		*) runwm=$(grep -oP '(?<=Exec=).*' "$wses"/$wm.desktop) param="$2"
		wrun
	esac
done
}

xsetup() {
printf "\nEntered X.Org prompt\n"
xcheck=$(find "$xses" -type f | wc -l)
case "$xcheck" in
	1) printf "\nOnly one environment found\n"
	runwm=$(grep -oP '(?<=Exec=).*' "$xses"/*.desktop)
	xrun;;
	0) printf "\n%sCRITICAL ERROR%s\nNo Xorg-based environment has been found.\n" "$RED" "$NORMAL"
	read -rp "Press return to go back to the start menu " az
	sdmlogin
esac

while read -rp "What X.Org desktop do you want to start? ([V]iew/E[x]it/[INPUT]) " wm; do
	case "$wm" in
		[Vv]) find "$xses" -type f -printf "%f\n";;
		[Xx]) ttyexit;;
		*) runwm=$(grep -oP '(?<=Exec=).*' "$xses"/$wm.desktop) param="$2"
		xrun
	esac
done
}

sdmlogin() {
# Navigate through multiple functions in this script
clear
printf "POSIX Shell Display Manager\n\nCurrent login session:\n"
who
printf "\nRecent logins:\n\n"
last | head -n 6
printf "\nCurrently used shell: %s\n\nInstalled desktops:\n\n" "$SHELL"
find "$xses" "$wses" -type f
printf "\n%sNOTE: Only .desktop files that exist can be run.%s\n\n" "$YELLOW" "$NORMAL"

while read -rp "Do you want to run an X.Org or Wayland desktop? ([X]org/[W]ayland/[E]xit) " xwe; do
	case "$xwe" in
		[Xx]) xsetup;;
		[Ww]) wsetup;;
		[Ee]) ttyexit;;
		*) printf "\nError: invalid input\n\n"
	esac
done
}

warn_user() {
# If a desktop is detected or TTY isn't running, warn user
[ "$runner" ] && if ! [ -f "$wses"/$wm ] && ! [ -f "$xses"/$wm ]; then
	empty_runner="The specified desktop doesn't exist, and "
fi

while true; do
	printf "%sWARNING: %sTTY1 was not detected or a desktop is running.%s\n" "$YELLOW" "$empty_runner" "$NORMAL"
	read -rp "Do you want to continue? (Y/N) " yn
	case "$yn" in
		[Yy]) case "$wm" in
			"") sdmlogin;;
			*) [ "$run_once" ] && sdmlogin || "$runner"
		esac;;
		[Nn]) ttyexit;;
		*) printf "\nError: invalid input\n\n"
	esac
done
}

concheck() {
# See if $DISPLAY is empty and TTY1 is detected, then view $wm and run $runner
# If the conditions are not met, enter warn_user prompt
if [ -z "$DISPLAY" ] && [ "$XDG_VTNR" -eq 1 ]; then
	case "$wm" in
		"") sdmlogin;;
		*) "$runner"
	esac
else
	tty_warn=1
	warn_user
fi
}

# Set variables and parameters for switch statement to handle user input
# Call concheck() and continue from there
xses="/usr/share/xsessions" wses="/usr/share/wayland-sessions"
YELLOW=$(tput setaf 3) RED=$(tput setaf 1) NORMAL=$(tput sgr0)
wm="$2" param="$3" name="posixsdm"
[ -z "$param" ] && dexec="exec dbus-run-session"

case "$1" in
	-[Rr]|--run) break;;
	-[Xx]|--xorg) runner=xrun runwm=$(grep -oP '(?<=Exec=).*' "$xses"/$wm.desktop);;
	-[Ww]|--wayland) runner=wrun runwm=$(grep -oP '(?<=Exec=).*' "$wses"/$wm.desktop);;
	-[Hh]|--help) printf "TTY-based display manager written in modern POSIX-compliant Shell
Usage: %s <option> [...]\n\nOptions:\n-r, --run\t\tRun the script and do a variable check
-x, --xorg [INPUT] \tRun Xorg-based desktop directly (not recommended)
-w, --wayland [INPUT]\tRun wayland-based desktop directly (not recommended)
-h, --help\t\tDisplay this help message\n" "$name"; exit;;
	"") printf "Error: whitespace detected\nUsage: %s <option> [...]
Options: --help, --run, --wayland, --xorg\n" "$name"; exit;;
	*) printf "Error: %s is not a valid option\nUsage: %s <option> [...]
Options: --help, --run, --wayland, --xorg\n" "$1" "$name"; exit
esac
concheck
