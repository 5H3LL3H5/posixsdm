#!/bin/sh
# posixsdm - Terminal-based display manager

# Menu to return to a TTY, back to the start of the script, or the login screen
ttyexit() {
printf "\nEntered exit prompt\n"
while true; do
printf "Do you want to return to the TTY or login menu? (T/E/L) "
read -r tel
	case $tel in
		[Tt]) printf "\nExiting to TTY shell...\n"
		exec $SHELL;;
		[Ee]) printf "\nExiting to TTY login...\n"
		exit 0;;
		[Ll]) printf "\nReturning to login screen...\n"
		sdmlogin;;
		*) printf "\nError: illegal input\n"
	esac
done
}

# Create function to directly start Wayland-based desktops
# First check if only one desktop file is found; if not, continue
# Afterwards, check for user input to search for wayland-sessions .desktop files
# If nothing is found, report user error
wrun() {
printf "\nEntered Wayland prompt\n"
wcheck=$(ls "$wses" | wc -l)
case "$wcheck" in
	1) printf "\nOnly one environment found, running\n"
	runwm=$(sed -n 's/^Exec=//p' $wses/*.desktop)
	exec dbus-run-session $runwm;;
	0) printf "\!!!CRITICAL ERROR!!!\n\nNo Wayland-based window manager or desktop environment found\nPress any key to go back to the start menu "
	read az
	sdmlogin
esac

while true; do
printf "\nWhat Wayland desktop environment do you want to enter?\n"
printf "\nThe following options are available:\nView .desktop files, Exit, Execute WM (V/X/INPUT) "
read -r wm
	case $wm in
		[Vv]) printf "\n"
		ls -1 $wses;;
		[Xx]) ttyexit;;
		$wm) if [ -f $wses/$wm.desktop ]; then
			runwm=$(sed -n 's/^Exec=//p' $wses/$wm.desktop)
			exec dbus-run-session $runwm
		else
			printf "\nError: illegal input or .desktop file not found\n"
		fi
	esac
done
}

# Create function to directly start Xorg-based desktops
# First check if only one desktop file is found; if not, continue
# If sx is found, execute Xorg server via sx; otherwise, fall back to startx/xinit
# Afterwards, check for user input to search for xsessions .desktop files
# If nothing is found, report user error
xrun() {
printf "\nEntered X.Org prompt\n"
xcheck=$(ls "$xses" | wc -l)
case "$xcheck" in
	1) printf "\nOnly one environment found, running\n"
	runwm=$(sed -n 's/^Exec=//p' $xses/*.desktop)
	exec dbus-run-session $runwm;;
	0) printf "\n!!!CRITICAL ERROR!!!\n\nNo Xorg-based window manager or desktop environment found\nPress any key to go back to the start menu "
	read az
	sdmlogin
esac

while true; do
printf "\nWhat X.Org desktop environment do you want to enter?\n"
printf "The following options are available:\nView .desktop files, Exit, Execute WM (V/X/INPUT) "
read -r wm
	case $wm in
		[Vv]) printf "\n"
		ls -1 $xses;;
		[Xx]) ttyexit;;
		$wm) if [ -f $xses/$wm.desktop ]; then
			runwm=$(sed -n 's/^Exec=//p' $xses/$wm.desktop)
			if [ -f /usr/bin/sx ]; then
				exec dbus-run-session sx $runwm
			elif [ -f /usr/bin/startx ]; then
				exec dbus-run-session startx $runwm
			else
				printf "\n!!!CRITICAL ERROR!!!\n\nXorg cannot be run, as neither startx or sx cannot be found\n"
			fi
		else
			printf "\nError: illegal input or .desktop file not found\n"
		fi
	esac
done
}

# Interactive console-based menu to navigate through all options presented in this script
sdmlogin() {
clear
printf "POSIX Shell Display Manager\n\n"
printf "Current login session:\n"
who
printf "\nRecent logins:\n\n"
last | head -n 6
printf "\nCurrently used shell: $SHELL\n\n"
printf "Installed X11 desktop environments:\n\n"
ls -1 $xses
printf "\nInstalled Wayland desktop environments:\n\n"
ls -1 $wses
printf "\nNOTE: .desktop files from environments that cannot be found cannot be run.\n\n"

while true; do
printf "Do you want to run an X.Org or Wayland graphical server? (X/W/N) "
read -r xwn
	case $xwn in
		[Xx]) xrun;;
		[Ww]) wrun;;
		[Nn]) ttyexit;;
		*) printf "\nError: illegal input\n"
	esac
done
}

# Warning prompt
# If the script is executed outside of TTY1, warn the user
warning() {
while true; do
printf "WARNING: TTY1 was not detected.\nIt is not recommended to run a desktop environment outside of TTY1.\n"
printf "Do you want to continue? (Y/N) "
read -r yn
	case $yn in
		[Yy]) sdmlogin;;
		[Nn]) ttyexit;;
		*) printf "\nError: illegal input\n"
	esac
done
}

# Create parameter check at startup; default behavior hints to all usage paramaters
# Set variables, check if $DISPLAY is null and the environment is TTY1
# If neither conditions are met, enter warning prompt
concheck() {
case "${DISPLAY}" in
	"") case "${XDG_VTNR}" in
		1) return 0;;
		*) warning
	esac;;
	*) warning
esac
}

# Simple function to allow for direct calling of window managers and their respective servers
callwin() {
case $server in
	xorg) concheck
	runwm=$(sed -n 's/^Exec=//p' $xses/$wm.desktop)
	if [ -f $xses/$wm.desktop ]; then
		exec dbus-run-session sx $runwm
	fi;;
	wayland) concheck
	runwm=$(sed -n 's/^Exec=//p' $wses/$wm.desktop)
	if [ -f $wses/$wm.desktop ]; then
		exec dbus-run-session $runwm
	fi
esac
}

# Create variables and parameters for switch statement to handle of user input
# Call the conditional check function first and continue from there
xses=/usr/share/xsessions
wses=/usr/share/wayland-sessions
opt="-r, -h, -x, -w"

case $1 in
	-r|--run) concheck
	sdmlogin;;
	-h|--help) printf "Terminal-based display manager written in POSIX Shell\n"
	printf "Usage: posixsdm <option> [...]\nOptions:"
	printf "\n-r, --run\tRun the script and do a variable check"
	printf "\n-h, --help\tDisplay this help message"
	printf "\n-x, --xorg [INPUT] \tRun startx or sx directly (not recommended)"
	printf "\n-w, --wayland [INPUT]\tRun wayland-based environmet directly (not recommended)\n";;
	-x|--xorg) wm=$2
	server=xorg
	callwin;;
	-w|--wayland) wm=$2
	server=wayland
	callwin;;
	*) printf "Error: wrong or empty parameter\nUsage: posixsdm <option> [...]\nOptions: $opt\n"
esac
